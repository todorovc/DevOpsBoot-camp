#!/bin/bash

# CI/CD Terraform Demo Setup Script
# This script helps set up the project with necessary configurations

set -e

echo "ðŸš€ CI/CD Terraform Demo Setup Script"
echo "======================================"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Function to print colored output
print_status() {
    echo -e "${GREEN}[INFO]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

print_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

# Check if required tools are installed
check_prerequisites() {
    print_status "Checking prerequisites..."
    
    MISSING_TOOLS=()
    
    if ! command -v docker &> /dev/null; then
        MISSING_TOOLS+=("docker")
    fi
    
    if ! command -v docker-compose &> /dev/null; then
        MISSING_TOOLS+=("docker-compose")
    fi
    
    if ! command -v git &> /dev/null; then
        MISSING_TOOLS+=("git")
    fi
    
    if ! command -v ssh-keygen &> /dev/null; then
        MISSING_TOOLS+=("ssh-keygen")
    fi
    
    if [ ${#MISSING_TOOLS[@]} -ne 0 ]; then
        print_error "Missing required tools: ${MISSING_TOOLS[*]}"
        echo "Please install the missing tools and run this script again."
        exit 1
    fi
    
    print_status "All prerequisites are installed âœ…"
}

# Generate SSH key pair
generate_ssh_key() {
    print_status "Setting up SSH key pair..."
    
    KEY_PATH="$HOME/.ssh/ci-cd-terraform-demo-key"
    
    if [ -f "$KEY_PATH" ]; then
        print_warning "SSH key already exists at $KEY_PATH"
        read -p "Do you want to overwrite it? (y/N): " -n 1 -r
        echo
        if [[ ! $REPLY =~ ^[Yy]$ ]]; then
            print_info "Using existing SSH key"
            return 0
        fi
    fi
    
    print_status "Generating SSH key pair..."
    ssh-keygen -t rsa -b 4096 -f "$KEY_PATH" -N "" -C "ci-cd-terraform-demo"
    
    print_status "SSH key pair generated successfully âœ…"
    echo "Private key: $KEY_PATH"
    echo "Public key: $KEY_PATH.pub"
}

# Update configuration files
update_configurations() {
    print_status "Updating configuration files..."
    
    # Get Docker Hub username
    read -p "Enter your Docker Hub username: " DOCKERHUB_USERNAME
    
    if [ -z "$DOCKERHUB_USERNAME" ]; then
        print_error "Docker Hub username is required"
        exit 1
    fi
    
    # Get AWS region
    read -p "Enter your preferred AWS region (default: us-west-2): " AWS_REGION
    AWS_REGION=${AWS_REGION:-us-west-2}
    
    # Get public key content
    PUBLIC_KEY_CONTENT=$(cat "$HOME/.ssh/ci-cd-terraform-demo-key.pub")
    
    # Update Jenkinsfile
    print_status "Updating Jenkinsfile..."
    sed -i.bak "s/your-dockerhub-username/$DOCKERHUB_USERNAME/g" Jenkinsfile
    sed -i.bak "s/us-west-2/$AWS_REGION/g" Jenkinsfile
    
    # Update docker-compose.yml
    print_status "Updating docker-compose configuration..."
    sed -i.bak "s/your-dockerhub-username/$DOCKERHUB_USERNAME/g" docker-compose/docker-compose.yml
    
    # Update terraform variables
    print_status "Updating Terraform configuration..."
    sed -i.bak "s/your-dockerhub-username/$DOCKERHUB_USERNAME/g" terraform/variables.tf
    sed -i.bak "s/us-west-2/$AWS_REGION/g" terraform/variables.tf
    
    # Clean up backup files
    find . -name "*.bak" -delete
    
    print_status "Configuration files updated âœ…"
}

# Create terraform.tfvars file
create_terraform_vars() {
    print_status "Creating terraform.tfvars file..."
    
    PUBLIC_KEY_CONTENT=$(cat "$HOME/.ssh/ci-cd-terraform-demo-key.pub")
    
    cat > terraform/terraform.tfvars << EOF
# Terraform Variables
# Update these values as needed

aws_region = "$AWS_REGION"
project_name = "ci-cd-terraform-demo"
environment = "dev"
instance_type = "t3.micro"
docker_image = "$DOCKERHUB_USERNAME/ci-cd-demo:latest"

# SSH Public Key (generated by setup script)
public_key = "$PUBLIC_KEY_CONTENT"
EOF
    
    print_status "terraform.tfvars file created âœ…"
}

# Display setup summary
show_summary() {
    print_status "Setup completed successfully! ðŸŽ‰"
    echo ""
    echo "ðŸ“‹ Summary:"
    echo "  - Docker Hub username: $DOCKERHUB_USERNAME"
    echo "  - AWS Region: $AWS_REGION"
    echo "  - SSH Key: $HOME/.ssh/ci-cd-terraform-demo-key"
    echo "  - Configuration files updated"
    echo "  - terraform.tfvars created"
    echo ""
    echo "ðŸ”§ Next Steps:"
    echo "  1. Set up Jenkins:"
    echo "     cd jenkins && docker-compose up -d"
    echo ""
    echo "  2. Configure Jenkins credentials (see README.md)"
    echo ""
    echo "  3. Create a Git repository and push this code"
    echo ""
    echo "  4. Create a Jenkins pipeline job"
    echo ""
    echo "  5. Run your first build!"
    echo ""
    echo "ðŸ“– For detailed instructions, see README.md"
}

# Initialize git repository (optional)
init_git_repo() {
    print_status "Initializing Git repository..."
    
    if [ -d ".git" ]; then
        print_warning "Git repository already exists"
        return 0
    fi
    
    read -p "Do you want to initialize a Git repository? (y/N): " -n 1 -r
    echo
    if [[ $REPLY =~ ^[Yy]$ ]]; then
        git init
        
        # Create .gitignore
        cat > .gitignore << EOF
# Maven
target/
pom.xml.tag
pom.xml.releaseBackup
pom.xml.versionsBackup
pom.xml.next
release.properties
dependency-reduced-pom.xml
buildNumber.properties
.mvn/timing.properties

# Docker
.docker/

# Terraform
*.tfstate
*.tfstate.*
.terraform/
.terraform.lock.hcl
terraform.tfvars
*.tfplan

# Jenkins
jenkins/jenkins_home/

# IDE
.vscode/
.idea/
*.iml

# OS
.DS_Store
Thumbs.db

# Logs
*.log

# Temporary files
*.tmp
*.bak

# SSH keys (security)
*.pem
*.key
!*.pub
EOF
        
        git add .
        git commit -m "Initial commit: CI/CD pipeline with Terraform"
        
        print_status "Git repository initialized âœ…"
        print_info "Don't forget to add a remote origin and push to your Git provider"
    fi
}

# Main execution
main() {
    check_prerequisites
    generate_ssh_key
    update_configurations
    create_terraform_vars
    init_git_repo
    show_summary
}

# Run main function
main "$@"