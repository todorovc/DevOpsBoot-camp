apiVersion: v1
kind: Secret
metadata:
  name: app-secrets
  namespace: online-shop
  labels:
    app.kubernetes.io/name: online-shop
    app.kubernetes.io/component: secret
type: Opaque
data:
  # Database Passwords (base64 encoded)
  # echo -n 'your-password-here' | base64
  DB_PASSWORD: cGFzc3dvcmQxMjM=  # password123
  REDIS_PASSWORD: cmVkaXNwYXNz  # redispass
  MONGO_ROOT_PASSWORD: bW9uZ29wYXNz  # mongopass
  
  # JWT Secret for authentication
  JWT_SECRET: bXktc2VjcmV0LWtleS1mb3Itand0LXRva2Vucw==  # my-secret-key-for-jwt-tokens
  
  # API Keys (if needed)
  PAYMENT_API_KEY: cGF5bWVudC1hcGkta2V5LWhlcmU=  # payment-api-key-here
  EMAIL_API_KEY: ZW1haWwtYXBpLWtleS1oZXJl  # email-api-key-here
---
apiVersion: v1
kind: Secret
metadata:
  name: redis-auth
  namespace: online-shop
  labels:
    app.kubernetes.io/name: redis
    app.kubernetes.io/component: secret
type: Opaque
data:
  # Redis password (base64 encoded)
  password: cmVkaXNwYXNz  # redispass
---
apiVersion: v1
kind: Secret
metadata:
  name: postgres-auth
  namespace: online-shop
  labels:
    app.kubernetes.io/name: postgres
    app.kubernetes.io/component: secret
type: Opaque
data:
  # PostgreSQL passwords (base64 encoded)
  POSTGRES_PASSWORD: cGFzc3dvcmQxMjM=  # password123
  DB_PASSWORD: cGFzc3dvcmQxMjM=  # password123
---
apiVersion: v1
kind: Secret
metadata:
  name: mongodb-auth
  namespace: online-shop
  labels:
    app.kubernetes.io/name: mongodb
    app.kubernetes.io/component: secret
type: Opaque
data:
  # MongoDB passwords (base64 encoded)
  MONGO_ROOT_PASSWORD: bW9uZ29wYXNz  # mongopass
  MONGO_PASSWORD: bW9uZ29wYXNz  # mongopass
---
# TLS Secret for HTTPS (placeholder - replace with real certificates)
apiVersion: v1
kind: Secret
metadata:
  name: tls-secret
  namespace: online-shop
  labels:
    app.kubernetes.io/name: online-shop
    app.kubernetes.io/component: tls
type: kubernetes.io/tls
data:
  # Replace with your actual TLS certificate and key
  # openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout tls.key -out tls.crt -subj "/CN=shop.example.com"
  # kubectl create secret tls tls-secret --cert=tls.crt --key=tls.key --namespace=online-shop --dry-run=client -o yaml
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURQekNDQWllZ0F3SUJBZ0lKQUtpN2lsM3RoUnBrTUEwR0NTcUdTSWIzRFFFQkN3VUFNRFF4CjEwQWdCZ05WQkFNTUFXUjJNR2Q5fIAoyCM0wGQHFJHNZGHFHRlnQHCz...
  tls.key: LS0tLS1CRUdJTiBQUklWQVRFIEtFWS0tLS0tCk1JSUV2UUlCQURBTkJna3Foa2lHOXcwQkFRRUZBQVNDQktjd2dnU2pBZ0VBQW9JQkFRQzVoUlhFCnQg89j8DSn9283hSDHOINk...